<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="z-wgY-=64-m(OQPI@hvP" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="[T;d^*kFW@?5aGayX37R"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tiny {" line1="" line2="    export enum Mode {" line3="        Safe = 0," line4="        Normal = 1," line5="        Sport = 2," line6="    }" line7="" line8="    export enum Direction {" line9="        //% blockId=&quot;Run&quot; block=&quot;Run&quot;" line10="        Run = 1," line11="        //% blockId=&quot;Back&quot; block=&quot;Back&quot;" line12="        Back = 2," line13="        //% blockId=&quot;Left&quot; block=&quot;Left&quot;" line14="        Left = 3," line15="        //% blockId=&quot;Right&quot; block=&quot;Right&quot;" line16="        Right = 4," line17="        //% blockId=&quot;Stop&quot; block=&quot;Stop&quot;" line18="        Stop = 5," line19="        //% blockId=&quot;SpinLeft&quot; block=&quot;SpinLeft&quot;" line20="        SpinLeft = 6," line21="        //% blockId=&quot;SpinRight&quot; block=&quot;SpinRight&quot;" line22="        SpinRight = 7," line23="    }" line24="" line25="    export enum Music {" line26="        //% blockId=&quot;dadadum&quot; block=&quot;dadadum&quot;" line27="        dadadum = 0," line28="        //% blockId=&quot;entertainer&quot; block=&quot;entertainer&quot;" line29="        entertainer," line30="        //% blockId=&quot;prelude&quot; block=&quot;prelude&quot;" line31="        prelude," line32="        //% blockId=&quot;ode&quot; block=&quot;ode&quot;" line33="        ode," line34="        //% blockId=&quot;nyan&quot; block=&quot;nyan&quot;" line35="        nyan," line36="        //% blockId=&quot;ringtone&quot; block=&quot;ringtone&quot;" line37="        ringtone," line38="        //% blockId=&quot;funk&quot; block=&quot;funk&quot;" line39="        funk," line40="        //% blockId=&quot;blues&quot; block=&quot;blues&quot;" line41="        blues," line42="        //% blockId=&quot;birthday&quot; block=&quot;birthday&quot;" line43="        birthday," line44="        //% blockId=&quot;wedding&quot; block=&quot;wedding&quot;" line45="        wedding," line46="        //% blockId=&quot;funereal&quot; block=&quot;funereal&quot;" line47="        funereal," line48="        //% blockId=&quot;punchline&quot; block=&quot;punchline&quot;" line49="        punchline," line50="        //% blockId=&quot;baddy&quot; block=&quot;baddy&quot;" line51="        baddy," line52="        //% blockId=&quot;chase&quot; block=&quot;chase&quot;" line53="        chase," line54="        //% blockId=&quot;ba_ding&quot; block=&quot;ba_ding&quot;" line55="        ba_ding," line56="        //% blockId=&quot;wawawawaa&quot; block=&quot;wawawawaa&quot;" line57="        wawawawaa," line58="        //% blockId=&quot;jump_up&quot; block=&quot;jump_up&quot;" line59="        jump_up," line60="        //% blockId=&quot;jump_down&quot; block=&quot;jump_down&quot;" line61="        jump_down," line62="        //% blockId=&quot;power_up&quot; block=&quot;power_up&quot;" line63="        power_up," line64="        //% blockId=&quot;power_down&quot; block=&quot;power_down&quot;" line65="        power_down," line66="    }" line67="" line68="    export enum Colors {" line69="        //% block=red" line70="        Red = 0xff0000," line71="        //% block=orange" line72="        Orange = 0xffa500," line73="        //% block=yellow" line74="        Yellow = 0xffff00," line75="        //% block=green" line76="        Green = 0x00ff00," line77="        //% block=blue" line78="        Blue = 0x0000ff," line79="        //% block=indigo" line80="        Indigo = 0x4b0082," line81="        //% block=violet" line82="        Violet = 0x8a2be2," line83="        //% block=purple" line84="        Purple = 0xff00ff," line85="        //% block=white" line86="        White = 0xffffff," line87="        //% block=black" line88="        Black = 0x000000," line89="    }" line90="" line91="    export enum IRState {" line92="        //% blockId=&quot;White&quot; block=&quot;White Line&quot;" line93="        White = 0," line94="        //% blockId=&quot;Black&quot; block=&quot;Black Line&quot;" line95="        Black = 1," line96="    }" line97="" line98="    enum State {" line99="        Idle," line100="        Moving," line101="    }" line102="" line103="    let strip = neopixel.create(DigitalPin.P15, 4, NeoPixelMode.RGB)" line104="    let _state: State = State.Idle;" line105="    let _mode: Mode = Mode.Safe;" line106="    let _speed: number = 125; // 0 .. 255" line107="    let _maxSpeed = 150;" line108="    let _stepUnit: number = 200; // ms" line109="    let _maxStep = 3;" line110="" line111="    //% block" line112="    //% step.defl=1" line113="    //% group=&quot;Drive&quot;" line114="    export function move(direction?: Direction, step?: number) {" line115="        motorRun(direction, step);" line116="    }" line117="" line118="    //% block" line119="    //% group=&quot;Drive&quot;" line120="    export function tank(leftSpeed: number, rightSpeed?: number) {" line121="        motorTank(leftSpeed, rightSpeed || leftSpeed);" line122="    }" line123="" line124="    //% block" line125="    //% group=&quot;Drive&quot;" line126="    export function stop() {" line127="        setPwmMotor(5, 0, 0);" line128="    }" line129="" line130="    //% block" line131="    //% group=&quot;Light&quot;" line132="    export function lightBack(color?: Colors) {" line133="        showBackLED(color);" line134="    }" line135="" line136="    //% block" line137="    //% group=&quot;Light&quot;" line138="    export function lightFront(color?: Colors) {" line139="        showFrontLED(color);" line140="    }" line141="" line142="    //% block" line143="    //% group=&quot;Music&quot;" line144="    export function playMusic(music: Music) {" line145="        // TODO" line146="    }" line147="" line148="    //% block" line149="    //% group=&quot;Sensors&quot;" line150="    export function getObstacleDistance(): number {" line151="        return maqueen.Ultrasonic(PingUnit.Centimeters)" line152="    }" line153="" line154="    //% block" line155="    //% group=&quot;Sensors&quot;" line156="    export function isIrLeft(state: IRState): boolean {" line157="        return maqueen.readPatrol(maqueen.Patrol.PatrolLeft) === state" line158="    }" line159="" line160="    //% block" line161="    //% group=&quot;Sensors&quot;" line162="    export function isIrRight(state: IRState): boolean {" line163="        return maqueen.readPatrol(maqueen.Patrol.PatrolRight) === state" line164="    }" line165="" line166="    //% block" line167="    //% maxSpeed.defl=150" line168="    //% maxSpeed.min=0 maxSpeed.max=255" line169="    //% group=&quot;Setters&quot;" line170="    export function setMaxSpeed(maxSpeed: number) {" line171="        _maxSpeed = maxSpeed;" line172="    }" line173="" line174="    //% block" line175="    //% maxStep.defl=3" line176="    //% maxStep.min=1 maxStep.max=5" line177="    //% group=&quot;Setters&quot;" line178="    export function setMaxStep(maxStep: number) {" line179="        _maxStep = maxStep;" line180="    }" line181="" line182="    //% block" line183="    //% speed.defl=70" line184="    //% speed.min=0 speed.max=255" line185="    //% group=&quot;Setters&quot;" line186="    export function setSpeed(speed: number) {" line187="        _speed = speed;" line188="    }" line189="" line190="    //% block" line191="    //% mode.defl='safe'" line192="    //% group=&quot;Setters&quot;" line193="    export function setMode(mode: Mode) {" line194="        _mode = mode;" line195="    }" line196="" line197="    export function getMode() {" line198="        return _mode;" line199="    }" line200="" line201="    // helpers" line202="    // ----------" line203="" line204="    function motorRun(direction = Direction.Run, step = 1) {" line205="        if (_mode === Mode.Safe) {" line206="            motorRunAdapter(direction, _speed);" line207="            basic.pause(Math.min(step, _maxStep) * _stepUnit);" line208="            motorRunAdapter(Direction.Stop, _speed);" line209="        } else if (_mode === Mode.Normal) {" line210="            motorRunAdapter(direction, Math.min(_speed, _maxSpeed));" line211="        } else {" line212="            motorRunAdapter(direction, _speed);" line213="        }" line214="    }" line215="" line216="    function motorRunAdapter(d = Direction.Run, speed?: number) {" line217="        switch (d) {" line218="            case Direction.Run: {" line219="                maqueen.motorRun(maqueen.Motors.All, maqueen.Dir.CW, speed)" line220="                break;" line221="            }" line222="            case Direction.Back: {" line223="                maqueen.motorRun(maqueen.Motors.All, maqueen.Dir.CCW, speed)" line224="                break;" line225="            }" line226="            case Direction.Stop: {" line227="                maqueen.motorStop(maqueen.Motors.All)" line228="                break;" line229="            }" line230="            case Direction.Left:" line231="            case Direction.SpinLeft: {" line232="                maqueen.motorStop(maqueen.Motors.M1)" line233="                maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CW, speed)" line234="                break;" line235="            } " line236="            case Direction.Right:" line237="            case Direction.SpinRight: {" line238="                maqueen.motorStop(maqueen.Motors.M2)" line239="                maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CW, speed)" line240="                break;" line241="            }" line242="        }" line243="    }" line244="" line245="    function motorTank(left: number, right: number, step = 1) {" line246="        const spin = Math.sign(left) != Math.sign(right);" line247="" line248="        if (left === 0 &amp;&amp; right === 0) setPwmMotor(0, 0, 0);" line249="        else if (left &gt;= 0 &amp;&amp; right &gt;= 0) setPwmMotor(1, left, right, step);" line250="        else if (left &lt;= 0 &amp;&amp; right &lt;= 0) setPwmMotor(2, -left, -right, step);" line251="        else if (right &gt; left) {" line252="            if (spin) setPwmMotor(6, Math.abs(left), right, step);" line253="            else setPwmMotor(3, Math.abs(left), right, step);" line254="        } else {" line255="            if (spin) setPwmMotor(7, left, Math.abs(right), step);" line256="            else setPwmMotor(4, left, Math.abs(right), step);" line257="        }" line258="    }" line259="" line260="    function getDir(speed: number) {" line261="        return speed &gt;= 0 ? maqueen.Dir.CW : maqueen.Dir.CCW" line262="    }" line263="" line264="    function setPwmMotor(d: number, speed1: number, speed2: number, step = 1) {" line265="        if (d &lt; 0 || d &gt; 7) return;" line266="" line267="" line268="        console.log('== tank : ' + _mode);" line269="" line270="" line271="        if (_mode === Mode.Safe) {" line272="            motorTanlAdapter(d, speed1, speed2)" line273="            basic.pause(Math.min(step, _maxStep) * _stepUnit);" line274="            motorTanlAdapter(Direction.Stop)" line275="        } else if (_mode === Mode.Normal) {" line276="            speed1 = Math.sign(speed1) * Math.min(Math.abs(speed1), _maxSpeed);" line277="            speed2 = Math.sign(speed2) * Math.min(Math.abs(speed2), _maxSpeed);" line278="            motorTanlAdapter(d, speed1, speed2)" line279="        } else {" line280="            motorTanlAdapter(d, speed1, speed2)" line281="        }" line282="    }" line283="" line284="    function motorTanlAdapter(d = Direction.Run, speed1?: number, speed2?: number) {" line285="        switch (d) {" line286="            case Direction.Run: {" line287="                maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CW, speed1)" line288="                maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CW, speed2)" line289="                break;" line290="            }" line291="            case Direction.Back: {" line292="                maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CCW, speed1)" line293="                maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CCW, speed2)" line294="                break;" line295="            }" line296="            case Direction.Stop: {" line297="                maqueen.motorStop(maqueen.Motors.All)" line298="                break;" line299="            }" line300="            case Direction.SpinLeft: {" line301="                maqueen.motorStop(maqueen.Motors.M1)" line302="                maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CW, speed2)" line303="                break;" line304="            }" line305="            case Direction.SpinRight: {" line306="                maqueen.motorStop(maqueen.Motors.M2)" line307="                maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CW, speed1)" line308="                break;" line309="            }" line310="        }" line311="    }" line312="" line313="    function showBackLED(c?: Colors): void {" line314="        if (!c) {" line315="            showColor(c)" line316="        } else {" line317="            showColor(c)" line318="        }" line319="    }" line320="" line321="" line322="" line323="    function showFrontLED(c?: Colors): void {" line324="        if (!c) {" line325="            maqueen.writeLED(maqueen.LED.LEDLeft, maqueen.LEDswitch.turnOff)" line326="            maqueen.writeLED(maqueen.LED.LEDRight, maqueen.LEDswitch.turnOff)" line327="        } else {" line328="            maqueen.writeLED(maqueen.LED.LEDLeft, maqueen.LEDswitch.turnOn)" line329="            maqueen.writeLED(maqueen.LED.LEDRight, maqueen.LEDswitch.turnOn)" line330="        }" line331="    }" line332="" line333="    function showColor(c: Colors) {" line334="        c = c &gt;&gt; 0;" line335="        const { red, green, blue } = setAllRGB(c);" line336="        strip.showColor(neopixel.rgb(red, green, blue))" line337="    }" line338="" line339="    function unpackR(rgb: number): number {" line340="        let r = (rgb &gt;&gt; 16) &amp; 0xff;" line341="        return r;" line342="    }" line343="" line344="    function unpackG(rgb: number): number {" line345="        let g = (rgb &gt;&gt; 8) &amp; 0xff;" line346="        return g;" line347="    }" line348="" line349="    function unpackB(rgb: number): number {" line350="        let b = rgb &amp; 0xff;" line351="        return b;" line352="    }" line353="" line354="    function setAllRGB(rgb: number) {" line355="        let red = unpackR(rgb);" line356="        let green = unpackG(rgb);" line357="        let blue = unpackB(rgb);" line358="        return { red, green, blue };" line359="    }" line360="}" numlines="361"></mutation></block></statement></block></xml>